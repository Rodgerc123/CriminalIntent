package com.bignerdranch.android.criminalintent

import android.content.Context
import androidx.room.Room
import com.bignerdranch.android.criminalintent.database.CrimeDao
import com.bignerdranch.android.criminalintent.database.MIGRATION_1_2
import com.bignerdranch.android.criminalintent.database.CrimeDatabase
import kotlinx.coroutines.flow.Flow
import java.util.UUID


/**
 * Repository = single source of truth for data access.
 * - Wraps Room database/DAO
 * - Exposes simple functions for ViewModels
 * - Implemented as a process-wide singleton
 */
class CrimeRepository private constructor(context: Context) {

    // Build the Room database once
    private val database: CrimeDatabase = Room.databaseBuilder(
        context.applicationContext,
        CrimeDatabase::class.java,
        DB_NAME
    )
        .addMigrations(MIGRATION_1_2)   // ‚Üê import from database.Migrations
        .build()

    // Get the DAO implementation generated by Room
    private val dao: CrimeDao = database.crimeDao()

    // ---- Read APIs (Flow so UI can observe) ----
    fun getCrimes(): Flow<List<Crime>> = dao.getCrimes()
    fun getCrime(id: UUID): Flow<Crime?> = dao.getCrime(id)

    // ---- Write APIs (suspend; call from a coroutine) ----
    suspend fun upsert(crime: Crime) = dao.upsert(crime)
    suspend fun delete(crime: Crime) = dao.delete(crime)

    companion object {
        private const val DB_NAME = "crimes.db"

        // Double-checked locking singleton
        @Volatile private var INSTANCE: CrimeRepository? = null

        /** Call exactly once on app startup (see Application class below). */
        fun initialize(context: Context) {
            if (INSTANCE == null) {
                synchronized(this) {
                    if (INSTANCE == null) {
                        INSTANCE = CrimeRepository(context)
                    }
                }
            }
        }

        /** Get the singleton instance (after initialize()). */
        fun get(): CrimeRepository =
            requireNotNull(INSTANCE) { "CrimeRepository must be initialized" }
    }
}